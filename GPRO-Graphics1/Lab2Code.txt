#define colorRGB   vec3
#define Coords     vec2
#define A          1.0


vec4 myEffect0(in Coords fragCoord)
{
//  Returns just red    
//  return vec4(1.0,0.0,0.0,1.0);
//  start working on gradient
    // R => horizontal G => verticle
    // B => ?
    // A => ?
//  return vec4(fragCoord, 0.0, 1);
    
    // final: red green gradient
    vec2 uv = fragCoord / iResolution.xy;
    return vec4(uv, .25, A);
}
//Reference for effect 1
//https://www.shadertoy.com/view/Xss3Dr
vec4 myEffect1(in Coords fragCoord)
{
    vec4 effectOne;
    Coords xy = floor(5.0 * fragCoord.xy * Coords(iResolution.x / iResolution.y, 1) / iResolution.xy); 
    effectOne = vec4(colorRGB(mod(xy.x + xy.y, 2.0)), A);
    return effectOne;
}
//Refference for effect 2
//https://www.shadertoy.com/view/XsjGDt
vec4 myEffect2(Coords fragCoord)
{
	Coords center = iResolution.xy * 0.5;//calculate center
	Coords uv = fragCoord.xy;
    float radius = 0.25 * iResolution.y;
    float diameter = length(uv - center) - radius; //compute diameter of a given position from the center
    float t = clamp(diameter, 0.0, 1.0);//not sure what t is short for here
    colorRGB R = (125.,15., 0.);
    vec4 circle;
    circle = (R, A);
    return circle;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    fragColor = myEffect0(fragCoord);//Effect 0
    fragColor = myEffect1(fragCoord);//Effect 1
  	fragColor = myEffect2(fragCoord);//Effect 2
    
}