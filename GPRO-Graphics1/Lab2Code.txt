#define colorRGB   vec3
#define Coords     vec2
#define A          1
vec4 myEffect0(in vec2 fragCoord)
{
//  Returns just red    
//  return vec4(1.0,0.0,0.0,1.0);
//  start working on gradient
    // R => horizontal G => verticle
    // B => ?
    // A => ?
//  return vec4(fragCoord, 0.0, 1);
    
    // final: red green gradient
    vec2 uv = fragCoord / iResolution.xy;
    return vec4(uv, 0.25 ,1.0);
}

//Reference for effect 1
//https://www.shadertoy.com/view/Xss3Dr
vec4 myEffect1(in vec2 fragCoord)
{
    vec4 effectOne;
    Coords xy = floor(5.0 * fragCoord.xy * Coords(iResolution.x / iResolution.y, 1) / iResolution.xy); 
    effectOne = vec4(colorRGB(mod(xy.x + xy.y, 2.0)), A);
    return effectOne;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
   //R, G, B, A => [0 , 1]
   // fragColor = vec4 (1.0,1.0,1.0,1.0);
   // Normalized pixel coordinates (from 0 to 1)
   // vec2 uv = fragCoord/iResolution.xy;

   // Time varying pixel color
   // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

   // Output to screen
   // fragColor = vec4(col,1.0);
   // Above is class code
    
    fragColor = myEffect0(fragCoord);//Effect 0
    fragColor = myEffect1(fragCoord);//Effect 1
  
}