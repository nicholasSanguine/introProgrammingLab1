#define colorRGBA  vec4
#define colorRGB   vec3
#define Coords     vec2
#define A          1.0


vec4 myEffect0(in Coords fragCoord)
{
    vec2 uv = fragCoord / iResolution.xy;
    return vec4(uv, .25, A);
}
// Reference for effect 1
// https://www.shadertoy.com/view/Xss3Dr
vec4 myEffect1(in Coords fragCoord)
{
    vec4 effectOne;
    Coords xy = floor(5.0 * fragCoord.xy * Coords(iResolution.x / iResolution.y, 1) / iResolution.xy); 
    effectOne = vec4(colorRGB(mod(xy.x + xy.y, 2.0)), A);
    return effectOne;
}
// Refference for effect 2
// https://www.shadertoy.com/view/XsjGDt
// Draw circle at center coord
vec4 myEffect2B(Coords uv, Coords center, float radius, colorRGB color)
{
	float diameter = length(center - uv) - radius;
    float t = clamp(diameter, 0.0, 1.0);
    return vec4 (color, 1.0 - t); 
}
colorRGB rgb(float r, float b, float g)//normalize the coloration
{
    return vec3(r / 255.0, g / 255.0, b / 255.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    fragColor = myEffect0(fragCoord);//Effect 0
    fragColor = myEffect1(fragCoord);//Effect 1
// Background so we dont just get a plain colored screen    
	colorRGBA layer1 = colorRGBA(rgb(210.0, 233.0, 228.0), A);
    
// Math stuff for effect 2B circle
    Coords uv = fragCoord.xy;
    Coords center = (iResolution.xy * 0.5);//grab center
    colorRGB color = rgb(8.0, 55.0, 55.0);//set color (passed in later)
    float radius = (0.25 * iResolution.y);
  	colorRGBA layer2 = myEffect2B(uv, center, radius, color);//Effect 2 
    fragColor = mix(layer1, layer2, layer2.a);
}